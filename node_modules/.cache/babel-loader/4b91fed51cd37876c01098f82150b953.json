{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\Drinkingbird-React-Tools\\\\src\\\\App.tsx\";\nimport React from 'react';\nimport { // eslint-disable-next-line\nTreemap } from 'recharts';\nimport './App.css';\nexport class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this._ticker = void 0;\n    this.state = {\n      votes: []\n    };\n  }\n\n  componentDidMount() {\n    if (!this._ticker) {\n      this._ticker = setInterval(this.apiCall.bind(this), 5000);\n    } // new Twitch.Embed(\"twitch-embed\", {\n    //   width: 854,\n    //   height: 480,\n    //   channel: \"cantwitchreach70\"\n    // });       <div id=\"twitch-embed\"></div>\n\n  }\n\n  componentWillUnmount() {\n    if (this._ticker) {\n      clearInterval(this._ticker);\n    }\n  }\n\n  apiCall() {\n    fetch('http://localhost:1338/votes').then(response => response.json()).then(data => {\n      // if (data.data.length === this.state.votes.length)\n      let voteOptions = {};\n\n      for (var i = 0; i < data.data.length; i++) {\n        let vo = data.data[i];\n\n        if (!voteOptions[vo]) {\n          voteOptions[vo] = 1;\n        } else {\n          voteOptions[vo]++;\n        }\n      }\n\n      let res = Object.keys(voteOptions).map((key, index) => {\n        return {\n          name: key,\n          value: voteOptions[key]\n        };\n      });\n      console.log(\"RES:\", res);\n      this.setState({\n        votes: {\n          name: \"Votes\",\n          children: res\n        }\n      }); // let count = [];\n      // let res = Object.keys(data).map((key, index) => {})\n\n      console.log('Success:', data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }\n\n  render() {\n    const {\n      votes\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      key: \"1\",\n      className: \"rechart-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"Survey-Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Next Action (\", votes.length, \")\"), React.createElement(Treemap, {\n      width: 730,\n      height: 250,\n      data: votes,\n      dataKey: \"Value\",\n      isAnimationActive: false,\n      aspectRatio: 1,\n      stroke: \"#f48c42\",\n      fill: \"#4a4440\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })));\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["C:/dev/Drinkingbird-React-Tools/src/App.tsx"],"names":["React","Treemap","App","Component","_ticker","state","votes","componentDidMount","setInterval","apiCall","bind","componentWillUnmount","clearInterval","fetch","then","response","json","data","voteOptions","i","length","vo","res","Object","keys","map","key","index","name","value","console","log","setState","children","catch","error","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  // eslint-disable-next-line\n  Treemap\n} from 'recharts';\n\ndeclare var Twitch:any;\nimport './App.css';\nexport class App extends React.Component {\n  private _ticker: any;\n  state = {\n    votes:[]\n  }\n  componentDidMount() {\n    if (!this._ticker) {\n      this._ticker = setInterval(this.apiCall.bind(this), 5000);\n    }\n    // new Twitch.Embed(\"twitch-embed\", {\n    //   width: 854,\n    //   height: 480,\n    //   channel: \"cantwitchreach70\"\n    // });       <div id=\"twitch-embed\"></div>\n\n  }\n\n  componentWillUnmount() {\n    if (this._ticker) {\n      clearInterval(this._ticker);\n    }\n  }\n\n  apiCall() {\n    fetch('http://localhost:1338/votes')\n    .then((response) => response.json())\n    .then((data) => {\n\n      // if (data.data.length === this.state.votes.length)\n      let voteOptions: any = {};\n      for( var i=0; i < data.data.length; i++ ) {\n        let vo = data.data[i];\n        if( !voteOptions[vo] ){\n            voteOptions[vo] = 1\n        } else {\n          voteOptions[vo]++;\n        }\n      }\n\n      let res = Object.keys(voteOptions).map((key, index) => {\n        return {name: key, value: voteOptions[key]}\n      });\n      console.log(\"RES:\", res);\n      this.setState({votes:{name: \"Votes\", children:res}});\n      // let count = [];\n      // let res = Object.keys(data).map((key, index) => {})\n      console.log('Success:', data);\n    })\n    .catch((error) => {\n      console.error('Error:', error);\n    });\n  }\n\n  render() {\n    const {votes} = this.state;\n    return (\n      <div className=\"App\">\n\n      <div key=\"1\" className=\"rechart-container\">\n      <h5 className=\"Survey-Description\">Next Action ({votes.length})</h5>\n        <Treemap\n          width={730}\n          height={250}\n          data={votes}\n          dataKey=\"Value\"\n          isAnimationActive={false}\n          aspectRatio={1}\n          stroke=\"#f48c42\"\n          fill=\"#4a4440\"\n        />\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}